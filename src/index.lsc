import { declare } from '@babel/helper-plugin-utils'

isExcludedPlugin(plugin, exclusions) ->
  if Array.isArray(plugin):
    exclusions.indexOf(plugin[0]) > -1
  else:
    exclusions.indexOf(plugin) > -1

export default declare! (api, opts) ->
  // Require Babel 7
  api.assertVersion(7)

  now opts = opts or {}
  decoratorOpts = opts.decoratorOpts or { legacy: true }

  // Compute baseline plugins
  basePlugins = [
    '@babel/plugin-proposal-object-rest-spread'
    '@babel/plugin-proposal-optional-chaining'
    '@babel/plugin-proposal-throw-expressions'
    ['@babel/plugin-proposal-decorators', decoratorOpts]
    ['@babel/plugin-proposal-class-properties', { loose: true }]
    '@babel/plugin-transform-react-jsx'
    '@babel/plugin-transform-flow-strip-types'
  ]

  // Allow user to exclude/add plugins
  excludedPlugins = opts.disablePlugins or []
  actualPlugins = basePlugins
    .filter(x -> not isExcludedPlugin(x, excludedPlugins))
    .concat(opts.additionalPlugins or [])

  // Apply LightScript plugin
  lscOpts = Object.assign({}, opts)
  delete lscOpts.env
  delete lscOpts.disablePlugins
  delete lscOpts.additionalPlugins
  delete lscOpts.decoratorOpts
  actualPlugins.unshift(['module:@lightscript/transform', lscOpts])

  // Apply Env preset and finish
  {
    plugins: actualPlugins
    presets: [
      if opts.env != false: [
        '@babel/preset-env'
        if typeof(opts.env) == 'object': opts.env else: {}
      ]
    ].filter(Boolean)
  }
